@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.Extensions.Options
@using PressureLogger.UI.Models
@using PressureLogger.UI.Options
@using System.Text.Json

@layout ContentLayout
@implements IAsyncDisposable
@inject IOptions<ApiOptions> Options
@inject HttpClient Http
@inject IJSRuntime JsRuntime
@page "/"


<PageTitle>Aktualny Pomiar</PageTitle>

<div class="d-flex justify-content-center align-items-center flex-column" style="height: calc(100vh - 96px);">
	<MudPaper Class="p-4" Elevation="4" Style="max-width: 950px; width: 100%;">
		<div class="d-flex justify-content-center align-items-center flex-column">
            <canvas id="gaugeCanvas" width="380" height="200"></canvas>
			<MudText Typo="Typo.h4" Align="Align.Center" Class="mb-2">
				Aktualny pomiar: <b>@(_currentWeight < 1.0 ? $"{(_currentWeight * 1000.0)} g" : $"{_currentWeight} kg")</b>
			</MudText>
			<MudText Typo="Typo.h6" Align="Align.Center">
				Data wykonania pomiaru: <b>@_date.ToString("HH:mm:ss   dd.MM.yyyy")</b>
			</MudText>
		</div>
	</MudPaper>
</div>

@code {
    private double _currentWeight = 0.0;
    private DateTime _date = DateTime.Now;
    private HubConnection? _hubConnection;

    protected override async Task OnInitializedAsync()
    {
        _hubConnection = new HubConnectionBuilder()
            .WithUrl(Options.Value.WeigthHub)
            .WithAutomaticReconnect()
            .Build();

        _hubConnection.On<double, DateTime>("SendWeight", async (receivedWeight, receivedDate) =>
        {
            _currentWeight = receivedWeight;
            _date = receivedDate;
            await InvokeAsync(StateHasChanged);
            await Task.Delay(100);
            await SetWeightCanvas(false);
        });

        await _hubConnection.StartAsync();

        var response = await Http.GetAsync("pressure/last");

        if (response.IsSuccessStatusCode)
        {
            var jsonResponse = await response.Content.ReadAsStringAsync();
            var obj = JsonSerializer.Deserialize<WeightModel>(jsonResponse, new JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive = true
                });

            _currentWeight = obj?.ValueInKilograms ?? 0.0;
            _date = obj?.CreatedAt ?? DateTime.Now;

            await Task.Delay(100);

            await SetWeightCanvas(true);
        }
    }

    private async Task SetWeightCanvas(bool init) => await JsRuntime.InvokeVoidAsync("setWeight", _currentWeight * 1000.0,init);

    public async ValueTask DisposeAsync()
    {
        if (_hubConnection is not null)
        {
            await _hubConnection.DisposeAsync();
        }
    }
}