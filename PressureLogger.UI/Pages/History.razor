@layout ContentLayout
@inject HttpClient Http
@inject IJSRuntime JsRuntime
@inject ISnackbar Snackbar
@using PressureLogger.UI.Models
@using System.Text.Json

@page "/history"

<PageTitle>Aktualne Pomiary</PageTitle>
<div class="d-flex flex-column" style="max-width: 500px;">
    <div class="d-flex flex-row">
        <div class="flex-grow-1 ma-2">
            <MudTextField T="DateTime?" Format="s" Label="Data początkowa" @bind-Value="@Start"
                          InputType="InputType.DateTimeLocal"/>
        </div>
        <div class="flex-grow-1 ma-2">
            <MudTextField T="DateTime?" Format="s" Label="Data końcowa" @bind-Value="@End"
                          InputType="InputType.DateTimeLocal"/>
        </div>
    </div>
    <div class="ma-2 w-100">
        <MudButton OnClick="@Submit" Color="Color.Primary" Disabled="@(Start is null || End is null)" Variant="Variant.Outlined">
            Wyświetl Wyniki
        </MudButton>
    </div>
</div>
<div>
    <canvas id="weightChart" width="400" height="200"></canvas>
</div>
@code {
    private List<WeightModel>? _weightData;

    private DateTime? Start { get; set; }
    private DateTime? End { get; set; }

    private async Task Submit()
    {
        if (Start is null || End is null)
        {
            Snackbar.Add("Należy wybrać daty!", Severity.Error);
            return;
        }
        else if (Start > End)
        {
            Snackbar.Add("Nieprawidłowe daty!", Severity.Error);
            return;
        }

        await LoadData((DateTime)Start!, (DateTime)End!);
        await InvokeAsync(StateHasChanged);
    }

    private async Task LoadData(DateTime start, DateTime end)
    {
        _weightData = await LoadWeightData(start, end);
        if (_weightData is not null && _weightData.Count > 0)
        {
            var dateStr = $"{start.ToString("HH:mm dd.MM.yyyy ")} - {end.ToString("HH:mm dd.MM.yyyy ")}";
            await DrawChart(dateStr);
        }
        else
        {
            Snackbar.Add($"Brak danych do wyświetlania dla danego periodu czasu.", Severity.Error);
        }
    }

    private async Task<List<WeightModel>?> LoadWeightData(DateTime start, DateTime end)
    {
        var startStr = start.ToString("yyyy-MM-ddTHH:mm:ss");
        var endStr = end.ToString("yyyy-MM-ddTHH:mm:ss");

        var response = await Http.GetAsync($"pressure/avg-min?begin={startStr}&end={endStr}");

        if (response.IsSuccessStatusCode)
        {
            var options = new JsonSerializerOptions() { PropertyNameCaseInsensitive = true };
            var bodyResponse = await response.Content.ReadAsStringAsync();
            return JsonSerializer.Deserialize<List<WeightModel>>(bodyResponse, options);
        }

        return [];
    }

    private async Task DrawChart(string date)
    {
        var chartData = _weightData!
            .Select(w => w.ValueInKilograms * 1000.0)
            .ToArray();
        
        var chartLabels = _weightData!
            .Select(w => w.CreatedAt.ToString("HH:mm"))
            .ToArray();

        await JsRuntime.InvokeVoidAsync("drawWeightChart", chartLabels, chartData, date);
    }

}