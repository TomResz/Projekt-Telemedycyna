@page "/stopwatch"
@using System.Text.Json
@using PressureLogger.UI.Models
@using System.Timers

<PageTitle>Stoper</PageTitle>
<MudCard Style="height: 150px; width:200px;">
	<MudCardContent >
		<div class="d-flex flex-column">
			<div class="d-flex flex-row mx-2 my-3">
				<MudTooltip Text="Start" Class="flex-grow-1">
					<MudIconButton Icon="@Icons.Material.Filled.PlayArrow"
					               OnClick="@StartTimer"
					               Class="h-100 w-100"
					               Disabled="_isRunning" 
					               Size="Size.Large"/>
				</MudTooltip>
				<MudTooltip Text="Stop" Class="flex-grow-1">
					<MudIconButton Icon="@Icons.Material.Filled.Stop"
					               Class="h-100 w-100" Disabled="@(!_isRunning)"
					               OnClick="@StopTimer" 
					               Size="Size.Large"/>
				</MudTooltip>
			</div>
			<MudText Typo="Typo.h6" Class="my-3">
				Czas: @_elapsedTime
			</MudText>
		</div>
	</MudCardContent>
</MudCard>
<canvas id="weightChart" width="400" height="200"></canvas>


@code {
	[Inject] public HttpClient Http { get; set; }
	[Inject] public IJSRuntime JsRuntime { get; set; }

	private System.Timers.Timer _timer = new System.Timers.Timer(1);

	private bool _isRunning = false;

	private DateTime? _beginDate = null;
	private DateTime? _endDate = null;

	private string _elapsedTime = "00:00:000";

	private void StartTimer()
	{
		_isRunning = true;
		_beginDate = DateTime.Now;

		_timer = new System.Timers.Timer(100);
		_timer.Start();
		_timer.Elapsed += OnTimedEvent;
	}

	private void OnTimedEvent(object? sender, ElapsedEventArgs e)
	{
		var currentTime = e.SignalTime;
		_elapsedTime = $"{currentTime.Subtract(_beginDate!.Value).ToString(@"mm\:ss\.fff")}";
		InvokeAsync(StateHasChanged);
	}

	private async Task StopTimer()
	{
		_timer.Stop();

		_isRunning = false;
		_endDate = DateTime.Now;

		var beginDateStr = _beginDate!.Value.ToString("yyyy-MM-ddTHH:mm:ss");
		var endDateStr = _endDate!.Value.ToString("yyyy-MM-ddTHH:mm:ss");

		var response = await Http.GetAsync($"pressure/avg-sec?begin={beginDateStr}&end={endDateStr}");

		if (response.IsSuccessStatusCode)
		{
			var options = new JsonSerializerOptions() { PropertyNameCaseInsensitive = true };
			var bodyResponse = await response.Content.ReadAsStringAsync();
			var models = JsonSerializer.Deserialize<List<WeightModel>>(bodyResponse, options);

			var chartData = models!.Select(w => w.ValueInKilograms * 1000.0).ToArray();
			var chartLabels = models!.Select(w => w.CreatedAt.ToString("HH:mm:ss")).ToArray();

			await JsRuntime.InvokeVoidAsync("drawWeightChart", chartLabels, chartData, string.Empty);
			await InvokeAsync(StateHasChanged);
		}

		_beginDate = null;
		_endDate = null;
	}

}