@page "/stopwatch"
@using System.Text.Json
@using PressureLogger.UI.Models
@using System.Timers

<PageTitle>Stoper</PageTitle>

<MudCard>
	<MudCardContent>
		<MudText Typo="Typo.h5" Class="mb-2">Stoper z wykresem</MudText>

		<MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="StartTimer" Disabled="@_isRunning">
			Start
		</MudButton>

		<MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="StopTimer" Disabled="@(!_isRunning)">
			Stop
		</MudButton>

		<MudText Typo="Typo.h6" Class="mt-3">
			Czas: @_elapsedTime
		</MudText>
		<canvas id="weightChart" width="400" height="200"></canvas>
	</MudCardContent>
</MudCard>

@code {
	[Inject] public HttpClient Http { get; set; }
	[Inject] public IJSRuntime JsRuntime { get; set; }

	private System.Timers.Timer _timer = new System.Timers.Timer(1);

	private bool _isRunning = false;

	private DateTime? _beginDate = null;
	private DateTime? _endDate = null;

	private string _elapsedTime = "00:00:000";

	private void StartTimer()
	{
		_isRunning = true;
		_beginDate = DateTime.Now;

		_timer = new System.Timers.Timer(100);
		_timer.Start();
		_timer.Elapsed += OnTimedEvent;
	}

	private void OnTimedEvent(object? sender, ElapsedEventArgs e)
	{
		var currentTime = e.SignalTime;
		_elapsedTime = $"{currentTime.Subtract(_beginDate!.Value).ToString(@"mm\:ss\.fff")}";
		InvokeAsync(StateHasChanged);
	}

	private async Task StopTimer()
	{
		_timer.Stop();

		_isRunning = false;
		_endDate = DateTime.Now;

		var beginDateStr = _beginDate!.Value.ToString("yyyy-MM-ddTHH:mm:ss");
		var endDateStr = _endDate!.Value.ToString("yyyy-MM-ddTHH:mm:ss");

		var response = await Http.GetAsync($"pressure/avg-sec?begin={beginDateStr}&end={endDateStr}");

		if (response.IsSuccessStatusCode)
		{
			var options = new JsonSerializerOptions() { PropertyNameCaseInsensitive = true };
			var bodyResponse = await response.Content.ReadAsStringAsync();
			var models = JsonSerializer.Deserialize<List<WeightModel>>(bodyResponse, options);

			var chartData = models!.Select(w => w.ValueInKilograms * 1000.0 ).ToArray();
			var chartLabels = models!.Select(w => w.CreatedAt.ToString("HH:mm:ss")).ToArray();

			await JsRuntime.InvokeVoidAsync("drawWeightChart", chartLabels, chartData, string.Empty);
			await InvokeAsync(StateHasChanged);
		}
		_beginDate = null;
		_endDate = null;
	}
}